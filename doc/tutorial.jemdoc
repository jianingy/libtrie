# jemdoc: menu{MENU}{tutorial.html}
= libtrie -- tutorial

This tutorial will show you how to use libtrie to store and retrieve information step by step.

== Include header file

To use libtrie in your C++ program, you need include its header file. 
~~~
{}{C++}
#include "trie.h"
~~~

== Create A Trie

You can choose to create either a tail-trie or a two-trie. The difference between
this two types of trie are shown in [faq.html libtrie's faq]

To create a trie use the following statements
~~~
{}{C++}
/* create a tail-trie */
dutil::trie *tailtrie = dutil::trie::create_trie(trie::SINGLE_TRIE);

/* create a two-trie */
dutil::trie *twotrie = dutil::trie::create_trie(trie::DOUBLE_TRIE);
~~~

== Insertion

First, create a key for your data as below. Notice that the first argument of key_type's
constructor is a pointer to the data which you wanna let it be the key and the second one 
is the length of the data.
~~~
{}{C++}
dutil::trie::key_type key("MyKey", 5);
~~~

Once a key is ready, you can use it to store a /trie::value_type/ value which is a 32bits
integer currently(I'll make it support more data types in future).
~~~
{}{C++}
dutil::trie::value_type value = 5678;
twotrie->insert(key, 1234);
tailtrie->insert(key, value);
~~~

== Searching

To search a trie you also need a /trie::key_type/ key described in the insertion section.
The returned value will be stored by a given pointer. Let's see it.
~~~
{}{C++}
dutil::trie::value_type value;
dutil::trie::key_type key("MyKey", 5);
twotrie->search(key, &value);
printf("value = %d\n", value);
~~~

In addition, this key can be reused by its /assign/ method like,
~~~
{}{C++}
key.assign("HisKey", 6);
tailtrie->search(key, &value);
~~~
